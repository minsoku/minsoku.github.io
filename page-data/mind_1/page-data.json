{"componentChunkName":"component---src-templates-blog-template-js","path":"/mind_1/","result":{"data":{"cur":{"id":"164755af-888d-5802-b087-da6d795f2fc8","html":"<h1 id=\"첫회사\" style=\"position:relative;\"><a href=\"#%EC%B2%AB%ED%9A%8C%EC%82%AC\" aria-label=\"첫회사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫회사</h1>\n<h2 id=\"입사\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EC%82%AC\" aria-label=\"입사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입사</h2>\n<p>2021년 8월 18일 프론트엔드개발자로써 들어간 첫 회사인 피어테크(지닥)에 입사를 했습니다.\n처음에는 드디어 개발자가 됐구나 하고 엄청 두근두근 했던 것 같아요.</p>\n<p>첫 회사는 가상화폐거래소였고, 사실 4대 거래소(업비트, 빗썸, 코인원, 코빗)을 제외하면 다들 모르시지만, 당시에는 거래량으로는 5등이었습니다..</p>\n<p>회사에 개발팀에서 파트는 총괄(CTO님), 어드민, 지갑, 거래소 서버, 프론트 이렇게 있었고 나를 제외해서 개발자는 총 6분이 계셨다.(개발자분들은 나의 아버지뻘 되시는 분들이신 짬만 합치면 100년도 그냥 넘어가시는 분들이셨다.)</p>\n<p>이상했던 게 프론트엔드 개발자는 없었어요…</p>\n<p>맥북과 다른 장비들을 받고 깃허브에서 코드를 클론하여 코드를 살펴보고 로컬 서버를 실행했는데, 로컬 서버가 실행이 안 됐었습니다…</p>\n<p>처음이라서 엄청 기억에 남았던 것 같습니다…</p>\n<p>이력도 확인해보고 하니까 프론트 코드는 그냥 방치가 되어있었고, 아무도 수정하려고 하지 않았어요…</p>\n<p>CTO님께 얘기를 들어보니까 사람을 뽑으면 다 들어오자마자 다 나가서 방치가 됐다고 하셨습니다..</p>\n<p>왜 힘들게 회사를 입사해서 다 나가는지 이해가 안 갔어요</p>\n<p>거래소 코드는 일반적인 부분이 아니면 만지기가 참 부담스러웠습니다.</p>\n<p>사람의 돈과 연결이 되어있어서 잘못 수정하면 모든 책임을 내가 지게 되어서 엄청 신중하게 코딩을 했던 것 같아요.</p>\n<p>그래도 살아남으려고 엄청 노력을 했었습니다.</p>\n<h2 id=\"첫-프로젝트\" style=\"position:relative;\"><a href=\"#%EC%B2%AB-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8\" aria-label=\"첫 프로젝트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫 프로젝트</h2>\n<p>첫 번째 프로젝트는 거래소에서 원화를 사용하지 못 하게 하는 것과 KYC인증(간단하게 고객 신원확인)를 할 수 있는 기능을 구현하는 것이었습니다.</p>\n<p>정부에서 정책을 내놓은 게 가상자산사업자를 취득해야지 가상화폐거래소를 유지할 수 있게 하는 것 때문에 기본 회원들 전체에 KYC인증을 강제로 하게 만들었습니다.\n(KYC인증이 되어야 고객 신원확인이 돼서 이상한사람(진짜 테러범, 북한인, 금융범죄자)가 사용하지 못 하게 할 수 있다.)</p>\n<p>KYC인증 프로젝트는 참 힘들었다. 일단 신분증 인증을 할 수 있는 OCR을 하는 페이지를 구현해야하고, 사실 회원가입절차, 개인정보수정 페이지 전체를 새로 만들어야 했습니다.</p>\n<p>아직 서비스 로직도 제대로 파악이 안 된 상태에서 혼자서 프론트엔드 개발을 전체 하기에는 많이 힘들었습니다.</p>\n<p>매달 택시비 70만원이상 나온 야근이 이때부터 시작이 됐습니다.</p>\n<p>보통 9시에 출근해서 새벽 1 ~ 2시에 퇴근하는 일상을 살았고, 회사(삼성동)에서 집(화성 병점)까지 새벽 택시로 1시간이 걸려서 집에 2 ~ 3시에 도착해서 바로 씻고 자면 3 ~ 4시간만 자고 바로 일어나서 씻고 출근을 했었습니다.</p>\n<p>사실 저는 모든 개발자가 다 이러는 줄 알았습니다.(개발자하면 야근이지 !)</p>\n<p>OCR페이지를 구현하다가 생각보다 잘 안 되는 부분이 있었는데 밤에 계속 수정을 하다가 지갑 개발자분이 나를 회의실로 불러서 말씀하셨습니다.</p>\n<p>남들 다 만드는 건데 너는 왜 남들이랑 똑같이 못 만드냐고 너는 재능이 없으니 그냥 퇴사하라고 엄청 쏘아대시면서 말씀 하셨습니다.</p>\n<p>그날 옥상에서 엄청 울었던 것 같아요 ㅠㅠ..</p>\n<p>근데 사실 맞는 말이죠</p>\n<p>당시에는 주에 혼자 80시간 이상 일하면서 정신이 너무 피폐해진 상태라 더욱 감정적으로 받아드린 것 같습니다.\n(모든 감정의 충동은 이성으로 통제되어야해 - 오만과 편견)</p>\n<p>추석연휴에도 집에 못 가고 30시간 이상 연속으로 개발도 했었습니다.</p>\n<p>그렇게 노력하니까 결국 다 완성해서 <strong>가상자산사업자 4호</strong>를 취득 성공 !!!</p>\n<h2 id=\"분위기\" style=\"position:relative;\"><a href=\"#%EB%B6%84%EC%9C%84%EA%B8%B0\" aria-label=\"분위기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>분위기?</h2>\n<p>우리회사는 스타트업이었습니다.</p>\n<p>내가 개발자로써는 여기만 회사를 다녀봐서 다른 회사의 분위기는 모르겠지만, 피어테크는 사람이 많이 들어왔다 나갔다 했었습니다.</p>\n<p>입사하고 3달인가 4달만에 C레벨을 제외하고 사번 3등이 되었습니다 ㅎㅎ(짬킹 !)</p>\n<p>그래서 회식(엄청 자유로운 분위기) 때 어른들께서 선배님선배님 하시면서 장난도 많이 치셨습니다. ㅎㅎㅎ</p>\n<p>보통 사람들이 근속을 2 ~ 3개월도 안 하셔서 근속년수보다는 근속월수가 가까웠고, 좀 오래 다니다 보니까 다들 엄청 인정해주시는 느낌이었습니다. (오래 다녀서 프론트 개발자를 결국 안 뽑아주시고 퇴사까지 혼자 했다… 퇴직금 받은 사람도 별로 없었다네요..)</p>\n<p>그래서 다른분들도 나를 많이 좋아해주셔서 점심 먹을 때 메뉴를 내가 많이 정한 것 같습니다!(사실 귀찮으셨을 수도)</p>\n<h2 id=\"트러블\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%9F%AC%EB%B8%94\" aria-label=\"트러블 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트러블</h2>\n<p>저는 개발자분들과는 큰 트러블이 없었습니다.</p>\n<p>항상 내가 맞추거나 다른 개발자분들이 나한테 맞춰주셔서 스무스하게 일을 같이 진행했던 것 같아요.</p>\n<p>근데 기획팀장님이랑은 트러블이 조금 있었습니다.</p>\n<p>배포는 개발자, 인프라 엔지니어한테 엄청나게 큰 작업입니다.</p>\n<p>배포를 하다가 문제가 생기면 서비스가 동작을 안 해서 고객에게 문제가 생겨서 회사가 신뢰를 잃을 수 있어 엄청 큰 작업이라고 생각합니다.</p>\n<p>기획팀장님은 문구 수정과 같은 작은 작업을 매일 찾아내서 매일 배포를 원하셨지만, 배포 하나의 리소스가 너무 낭비되기도 했고, 문구 하나가 엄청 중요한가 싶기도 했습니다.</p>\n<p>그래서 토론을 엄청 했고, 사실 제가 졌습니다.</p>\n<p>음.. 애초에 기획팀장 vs 개발팀원 이렇게 토론하는 것이 상대가 안 된다고 생각합니다.</p>\n<p>기획팀원 vs 개발팀원이면 괜찮지만 회사에 직급이 없다고 해도 상대는 팀장이기 때문에 저도 우리 개발팀장님이신 CTO님께 사정을 말씀드려서 일을 진행했습니다.</p>\n<p>의견은 맞지 않았지만 서로 공통된 점 하나는 서비스를 위하는 것이기 때문에 배포일을 정해서 긴급하게 문제가 되는 것 아니면 <strong>목요일</strong>마다 배포를 진행하기로 했습니다.\n(주 5일 배포에 비하면 CTO님의 승리로 끝)</p>\n<h2 id=\"퇴사\" style=\"position:relative;\"><a href=\"#%ED%87%B4%EC%82%AC\" aria-label=\"퇴사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>퇴사</h2>\n<p>회사를 1년 4개월 다니고 퇴사를 결심하였습다.</p>\n<p>이유는</p>\n<h3 id=\"첫-번째\" style=\"position:relative;\"><a href=\"#%EC%B2%AB-%EB%B2%88%EC%A7%B8\" aria-label=\"첫 번째 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫 번째</h3>\n<p>재직자전형으로 인하대학교 소프트웨어융합공학과를 지원했고,</p>\n<p>나의 고등학교 성적과 생활기록부를 봤을 때 충분히 합격이 가능하다고 생각했었습니다.</p>\n<p>그래서 어릴 때 못 즐긴 대학 라이프를 즐기자는 마음이 생겼습니다.\n지금도 잘 다니고 있어요~~</p>\n<h3 id=\"두-번째\" style=\"position:relative;\"><a href=\"#%EB%91%90-%EB%B2%88%EC%A7%B8\" aria-label=\"두 번째 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두 번째</h3>\n<p>성격변화</p>\n<p>하루에 짧으면 2시간 길면 4시간을 자면서 일하다 보니까 나의 성격이 엄청 거칠어졌다고 생각이 들었습니다.</p>\n<p>보통 칼퇴근은 달에 한 번 하면 많이 한 수준이고 23시 이후 택시비가 지원이 되었는데, 달마다 법카 택시비가 70 ~ 80만원이 나왔습니다. (삼성동 => 병점 5~6만원)</p>\n<p>잠을 적게 자다보니까 원래 사이가 좋았던 부모님께 사소한 일에도 성질을 내기도 했고, 원래 엄청 긍정적이고 밝았던 나 자신이 부정적이고 어두워지게 됐습니다.</p>\n<p>(어른들께서 잠이 보약이라고 하신 말씀에 대해서 이해를 하게 됐습니다.)</p>\n<p>(지금은 정신적으로 너무 깨끗해졌습니다.)</p>\n<h2 id=\"다시-개발\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%8B%9C-%EA%B0%9C%EB%B0%9C\" aria-label=\"다시 개발 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다시 개발</h2>\n<p>그래도 저는 다시 개발을 할겁니다.\nnodejs도 계속 만져보기도 하고, 옛날 생각을 하니까 개발을 하는 순간의 감정이 너무 행복했다고 생각이 들어서 다시 개발을 할겁니다.</p>","excerpt":"첫회사 입사 2021년 8월 18일 프론트엔드개발자로써 들어간 첫 회사인 피어테크(지닥)에 입사를 했습니다.\n처음에는 드디어 개발자가 됐구나 하고 엄청 두근두근 했던 것 같아요. 첫 회사는 가상화폐거래소였고, 사실 4대 거래소(업비트, 빗썸, 코인원, 코빗)을 제외하면 다들 모르시지만, 당시에는 거래량으로는 5등이었습니다.. 회사에 개발팀에서 파트는 총괄(CTO님), 어드민, 지갑, 거래소 서버, 프론트 이렇게 있었고 나를 제외해서 개발자는 총 6분이 계셨다.(개발자분들은 나의 아버지뻘 되시는 분들이신 짬만 합치면 100년도 그냥 넘어가시는 분들이셨다.) 이상했던 게 프론트엔드 개발자는 없었어요… 맥북과 다른 장비들을 받고 깃허브에서 코드를 클론하여 코드를 살펴보고 로컬 서버를 실행했는데, 로컬 서버가 실행이 안 됐었습니다… 처음이라서 엄청 기억에 남았던 것 같습니다… 이력도 확인해보고 하니까 프론트 코드는 그냥 방치가 되어있었고, 아무도 수정하려고 하지 않았어요… CTO님께 얘기…","frontmatter":{"date":"March 22, 2021","title":"첫회사","categories":"생각 첫회사","author":"minsoku","emoji":"🐶"},"fields":{"slug":"/mind_1/"}},"next":null,"prev":{"id":"96e7f105-0f88-58e2-ad61-b6d371cceb99","html":"<ul>\n<li><a href=\"https://nestjs.com/\">Nestjs</a>는 효율적이고 스케일링이 쉬운 nodejs 서버를 만드는데 사용하는 프레임워크이다.</li>\n<li>차세대 Javascript를 사용하며 Typescript로 만들어졌으며 Typescript를 완전히 지원한다.</li>\n<li>Nestjs는 Express 같은 견고한 HTTP 서버 프레임워크를 사용하고 있으며 원한다면 Fastify를 대신 사용할 수 있다.</li>\n<li>상당히 많은 Nodejs 라이브러리, 헬퍼, 툴들이 있음에도 불구하고 아키텍처 설계에 대한 문제를 해결해주는 해결책은 존재하지 않는다.</li>\n<li>Nestjs는 자체적으로 서버 아키텍쳐를 제공해준다. 그래서 테스트하기 쉽고, 디커플링이 잘 되어있고, 유지보수가 편한 서버를 제작하게 해준다.</li>\n</ul>\n<h1 id=\"nestjs-lifecycle\" style=\"position:relative;\"><a href=\"#nestjs-lifecycle\" aria-label=\"nestjs lifecycle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nestjs LifeCycle</h1>\n<p><img src=\"https://velog.velcdn.com/images/minsoku03/post/b67672cd-fdea-4067-ab80-02e15b3ffdb3/image.png\" alt=\"Nestjs LifeCycle\"></p>\n<h2 id=\"pipe\" style=\"position:relative;\"><a href=\"#pipe\" aria-label=\"pipe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pipe</h2>\n<ul>\n<li>Pipe는 Injectable 데코레이터로 데코레이팅 되어있고, PipeTransform이라는 인터페이스를 implement한다.</li>\n<li>변형: 원하는 형태로 변형시켜준다 ex) string => integer</li>\n<li>검증: 만약에 유효한 데이터면 그대로 전달해주고 아닐 경우에는 에러를 던진다.</li>\n</ul>\n<h2 id=\"코드예시\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EC%98%88%EC%8B%9C\" aria-label=\"코드예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드예시</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">test.pipe.ts\n\nimport {\n    ArgumentMetadata,\n    BadRequestException,\n    Injectable,\n    PipeTransform,\n} from '@nestjs/common';\n\n@Injectable()\nexport class TestPipe implements PipeTransform {\n    transform(value: any, metadata: ArgumentMetadata) {\n        if (value.content.toString().length > 10) {\n            throw new BadRequestException(\n                'content는 10자 미만으로 작성해주세요',\n            );\n        }\n        return value.toString();\n    }\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.controller.ts\n\n@Controller()\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n\n    @Get()\n    @UsePipes(TestPipe)\n    getHello(@Body() body: Ibody): string {\n        console.log(body);\n        return '성공';\n    }\n}</code></pre></div>\n<h3 id=\"결과\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC\" aria-label=\"결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과</h3>\n<blockquote>\n<p>“message”: “content는 10자 미만으로 작성해주세요”,</p>\n</blockquote>\n<blockquote>\n<p>“error”: “Bad Request”,</p>\n</blockquote>\n<blockquote>\n<p>“statusCode”: 400</p>\n</blockquote>\n<h2 id=\"guard\" style=\"position:relative;\"><a href=\"#guard\" aria-label=\"guard permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Guard</h2>\n<ul>\n<li>Guard는 쉽게 말하면 보호하는 역할</li>\n<li>Guard는 api 요청이 들어갔을 때 (Controller, Service, Repository) 로직 처리 부분까지 갈 수 있냐 없냐를 결정하게 해주는 요소다.</li>\n<li>Pipe가 적용이 되기 훨씬 전에 Guard가 먼저 적용이 돼서 만약에 Guard에서 이번 요청은 들어갈 수가 없어라고 판단을 한다면 파이프까지의 요청이 이어지지도 않는다.</li>\n<li>Guard를 구현하는 것은 Pipe를 구현하는 것과 굉장히 비슷하다.</li>\n<li>Injectable 데코레이터로 데코레이팅하고, CanActivate라는 타입을 implement를 해준다.</li>\n</ul>\n<h2 id=\"코드예시-1\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EC%98%88%EC%8B%9C-1\" aria-label=\"코드예시 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드예시</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">test.guard.ts\n\nimport {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    UnauthorizedException,\n} from '@nestjs/common';\n\n@Injectable()\nexport class TestGuard implements CanActivate {\n    canActivate(context: ExecutionContext): boolean {\n        const req = context.switchToHttp().getRequest();\n        const token = req.headers['authorization'];\n        if (!token) {\n            throw new UnauthorizedException('토큰이 없습니다 !!!!');\n        }\n        return true;\n    }\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.controller.ts\n\n@Controller()\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n    @Get()\n    @UsePipes(TestPipe)\n    @UseGuards(TestGuard)\n    getHello(@Body() body: Ibody): string {\n        console.log(body);\n        return '성공';\n    }\n}</code></pre></div>\n<h2 id=\"결과-1\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC-1\" aria-label=\"결과 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과</h2>\n<ul>\n<li>Autorization을 안 넣었을 때</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/minsoku03/post/a5f9eeaa-ab9d-4efa-b469-31c4d57451dd/image.png\" alt=\"Guard Autorization\"></p>\n<ul>\n<li>Autorization을 넣었을 때</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/minsoku03/post/ae49af58-8478-480c-8742-968275504912/image.png\" alt=\"Guard Autorization\"></p>\n<h2 id=\"interceptor\" style=\"position:relative;\"><a href=\"#interceptor\" aria-label=\"interceptor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interceptor</h2>\n<ul>\n<li>메서드를 실행하기 전과 후로 우리가 추가 로직을 작성을 할 수가 있다.</li>\n<li>함수에서 반환된 결과를 우리가 변형할 수 있다.</li>\n<li>함수에서 던진 에러를 우리가 변형할 수 있다.</li>\n<li>기본으로 작성해놓은 함수로직에 추가 기능을 넣을 수가 있다.</li>\n<li>어떤 함수의 기능을 완전히 override할 수가 있다.</li>\n<li>Nestjs 라이프사이클에서 볼 수 있는 모든 기능 중에서 유일하게 요청과 응답을 모두 핸들링할 수 있는 기능이다.</li>\n<li>또 보통 로그를 쌓는 기능은 Interceptor에서 수행된다.</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/minsoku03/post/7df6346c-4e2d-4268-a9da-fb00fb029998/image.png\" alt=\"Interceptor\"></p>\n<ul>\n<li>위를 보면 Client Side(App, Web or server)가 있다.</li>\n<li>요청이 들어가서 Route Handler(포스트, 게시글 등등) 여기로 요청이 들어가면 Interceptor가 한 번 Intercepting을 한다.</li>\n</ul>\n<p>이 요청을 변경하거나 그대로 둘 수 있다.</p>\n<ul>\n<li>그다음에 요청이 processing이 되고 Route Handler에서 함수가 실행이 되고 다시 응답으로 Client Side로 보내질 때, 그때 한 번 더 Interceptor가 적용이 된다.</li>\n<li>Request용 Interceptor, Response용 Interceptor를 따로 작성을 하는 게, 아니고 Interceptor 하나에서 이 두 가지를 모두 핸들링할 수 있는 것이 Interceptor의 특장이다.</li>\n<li>ExceptionFilter(예외상황처리라 예외) Interceptor가 유일하게 응답값까지 변경을 할 수 있는 기능이다.</li>\n<li>Interceptor는 Observable이라는 것을 반환하고 Rxjs를 사용한다. 그리고 Injectable 데코레이터로 데코레이팅하고 NestInterceptor를 implement 한다.</li>\n</ul>\n<h2 id=\"코드예시-2\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EC%98%88%EC%8B%9C-2\" aria-label=\"코드예시 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드예시</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">test.interceptor.ts\n\nimport {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from '@nestjs/common';\nimport { Observable, tap } from 'rxjs';\n\n@Injectable()\nexport class TestInterceptor implements NestInterceptor {\n    intercept(\n        context: ExecutionContext,\n        next: CallHandler&lt;any>,\n    ): Observable&lt;any> {\n        const now = new Date();\n        console.log(`[REQ] ${now.toLocaleString('kr')}`);\n        return next\n            .handle()\n            .pipe(\n                tap((observable) =>\n                    console.log(\n                        `[RES] ${new Date().toLocaleString('kr')} ${\n                            new Date().getMilliseconds() - now.getMilliseconds()\n                        }`,\n                    ),\n                ),\n            );\n    }\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.controller.ts\n\n@Controller()\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n    @Get()\n    @UsePipes(TestPipe)\n    @UseGuards(TestGuard)\n    @UseInterceptors(TestInterceptor)\n    getHello(@Body() body: Ibody): string {\n        return '성공';\n    }\n}</code></pre></div>\n<h3 id=\"결과-2\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC-2\" aria-label=\"결과 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과</h3>\n<blockquote>\n<p>[REQ] 12/14/2023, 5:33:51 PM</p>\n</blockquote>\n<blockquote>\n<p>[RES] 12/14/2023, 5:33:51 PM 4</p>\n</blockquote>\n<h2 id=\"exceptionfilter\" style=\"position:relative;\"><a href=\"#exceptionfilter\" aria-label=\"exceptionfilter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ExceptionFilter</h2>\n<ul>\n<li>ExceptionFilter는 말 그대로 예외를 필터링하는 것이다.</li>\n<li>예외가 일어났을 때 그 특정 예외를 잡아 가지고 형태를 변경한다던지, 특정 응답을 보내는 등의 여러가지 작업을 할 수가 있다.</li>\n<li>ExceptionFilter는 에러처리에 대한 로깅 로직을 작성하기 좋은 위치에 있다.</li>\n<li>ExceptionFilter는 먼저 Controller, Service, Repository의 로직 처리 후 ExceptionFilter가 적용이 되고 Interceptor로 전달이 된다.</li>\n<li>ExceptionFilter에서 수행한 부분들은 Interceptor에서 마찬가지로 또 추가 처리를 할 수가 있다.</li>\n</ul>\n<p><a href=\"https://velog.velcdn.com/images/minsoku03/post/85b9ce03-a85d-4884-b0a7-0812ffc92cad/image.png\">!ExceptionFilter</a></p>\n<ul>\n<li>클라이언트 사이드에서 요청을 보내고, 요청을 처리하는 부분에서 응답이 돌아갈 때 Filter가 적용이 된다.</li>\n</ul>\n<h3 id=\"코드예시-3\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EC%98%88%EC%8B%9C-3\" aria-label=\"코드예시 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드예시</h3>\n<ul>\n<li>ExceptionFilter는 Catch로 데코레이팅이 되고 ExceptionFilter를 implement한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">test.exceptionFilter.ts\n\nimport {\n    ArgumentsHost,\n    Catch,\n    ExceptionFilter,\n    HttpException,\n} from '@nestjs/common';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n    catch(exception: HttpException, host: ArgumentsHost) {\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        const status = exception.getStatus();\n\n        response.status(status).json({\n            statusCode: status,\n            message: exception.message,\n            timestamp: new Date().toLocaleDateString('kr'),\n            path: request.url,\n        });\n    }\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.controller.ts\n\n@Controller()\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n    @Get()\n    @UsePipes(TestPipe)\n    @UseGuards(TestGuard)\n    @UseInterceptors(TestInterceptor)\n    @UseFilters(HttpExceptionFilter)\n    getHello(@Body() body: Ibody): string {\n        throw new BadRequestException('에러라고합니다 !');\n        return '성공';\n    }\n}</code></pre></div>\n<h3 id=\"결과-3\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC-3\" aria-label=\"결과 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과</h3>\n<blockquote>\n<p>“statusCode”: 400</p>\n</blockquote>\n<blockquote>\n<p>“message”: “에러라고합니다 !”</p>\n</blockquote>\n<blockquote>\n<p>“timestamp”: “12/14/2023”</p>\n</blockquote>\n<blockquote>\n<p>“path”: ”/”</p>\n</blockquote>\n<ul>\n<li>이렇게 하나의 endpoint에 적용할 수도 있고, 전체에 적용할 수 있습니다.</li>\n</ul>\n<h3 id=\"전체에-exceptionfilter를-적용하는-코드-예시\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4%EC%97%90-exceptionfilter%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%98%EB%8A%94-%EC%BD%94%EB%93%9C-%EC%98%88%EC%8B%9C\" aria-label=\"전체에 exceptionfilter를 적용하는 코드 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체에 ExceptionFilter를 적용하는 코드 예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main.ts\n\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { HttpExceptionFilter } from 'src/exception-filter/test.exceptionFilter';\n\nasync function bootstrap() {\n    const app = await NestFactory.create(AppModule);\n    await app.listen(3000);\n\n    app.useGlobalFilters(new HttpExceptionFilter());\n}\nbootstrap();</code></pre></div>\n<h2 id=\"middleware\" style=\"position:relative;\"><a href=\"#middleware\" aria-label=\"middleware permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Middleware</h2>\n<p>MiddleWare가 가장 먼저 요청을 받는 역할을 한다.</p>\n<ul>\n<li>어떤 코드든 실행할 수 있다.</li>\n<li>요청과 응답 객체의 변화를 우리가 만들어 줄 수 있다. (무언가를 추가하거나 삭제하거나 업데이트가 가능)</li>\n<li>요청이 끝나기전에 우리가 중간에 중지를 할 수 있다.</li>\n<li>MiddleWare를 원한다면 여러개를 계속 적용을 할 수가 있다.</li>\n<li>만약에 현재 MiddleWare가 요청 사이클을 중지시키지 않고 에러 같은 것을 던지지 않으면 다음 MiddleWare에다가 요청을 넘기기 위해서 next 함수를 불러야 된다. (안 그러면 그대로 멈춤)</li>\n</ul>\n<h3 id=\"코드예시-4\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EC%98%88%EC%8B%9C-4\" aria-label=\"코드예시 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">test.middleware.ts\n\nimport { NestMiddleware } from '@nestjs/common';\nimport { NextFunction } from 'express';\n\nexport class TestMiddleWare implements NestMiddleware {\n    use(req: Request, res: Response, next: NextFunction) {\n        console.log(\n            `[REQ] ${req.url} ${req.method} ${new Date().toLocaleString('kr')}`,\n        );\n        next();\n    }\n}</code></pre></div>\n<ul>\n<li>다른 라이프사이클과 다른 점은 middleware는 modlue에 작성을 한다.</li>\n<li>NestModule를 implements를 하고 path, method로 원하는 값을 받을 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app.module.ts\n\nimport {\n    MiddlewareConsumer,\n    Module,\n    NestModule,\n    RequestMethod,\n} from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TestMiddleWare } from 'src/middleware/test.middleware';\n\n@Module({\n    imports: [],\n    controllers: [AppController],\n    providers: [AppService],\n})\nexport class AppModule implements NestModule {\n    configure(consumer: MiddlewareConsumer) {\n        consumer.apply(TestMiddleWare).forRoutes({\n            path: '/',\n            method: RequestMethod.ALL,\n        });\n    }\n}</code></pre></div>\n<h3 id=\"결과-4\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC-4\" aria-label=\"결과 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과</h3>\n<blockquote>\n<p>[REQ] / GET 12/14/2023, 6:24:48 PM</p>\n</blockquote>","frontmatter":{"date":"March 22, 2021","title":"nestjs","categories":"nestjs ts","author":"minsoku","emoji":"🐶"},"fields":{"slug":"/nestjs_intro/"}}},"pageContext":{"slug":"/mind_1/","nextSlug":"","prevSlug":"/nestjs_intro/"}},"staticQueryHashes":["1956554647","2938748437"]}