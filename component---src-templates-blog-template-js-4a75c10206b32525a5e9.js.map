{"version":3,"file":"component---src-templates-blog-template-js-4a75c10206b32525a5e9.js","mappings":"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","sources":["webpack://minsoku.github.io/./src/components/post-header/index.js","webpack://minsoku.github.io/./src/components/post-navigator/index.js","webpack://minsoku.github.io/./src/components/post-content/index.js","webpack://minsoku.github.io/./src/components/utterances/index.js","webpack://minsoku.github.io/./src/templates/blog-template.js"],"sourcesContent":["import { Link } from 'gatsby';\nimport React from 'react';\nimport './style.scss';\n\nfunction PostHeader({ post }) {\n  return (\n    <header className=\"post-header\">\n      {post.emoji ? <div className=\"emoji\">{post.emoji}</div> : null}\n      <div className=\"info\">\n        <div className=\"categories\">\n          {post.categories.map((category) => (\n            <Link className=\"category\" key={category} to={`/posts/${category}`}>\n              {category}\n            </Link>\n          ))}\n        </div>\n      </div>\n\n      <h1 className=\"title\">{post.title}</h1>\n      <div className=\"info\">\n        {/* <div className=\"author\">\n          posted by <strong>{post.author}</strong>,\n        </div>{' '}\n        {post.date} */}\n      </div>\n    </header>\n  );\n}\nexport default PostHeader;\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport './style.scss';\n\nfunction PostNavigator({ prevPost, nextPost }) {\n  return (\n    <div className=\"post-navigator\">\n      <div className=\"post-navigator-card-wrapper\">\n        {nextPost && (\n          <Link className=\"post-card prev\" key={nextPost.id} to={nextPost.slug}>\n            <div className=\"direction\">이전 글</div>\n            <div className=\"title\">{nextPost.title}</div>\n          </Link>\n        )}\n      </div>\n      <div className=\"post-navigator-card-wrapper\">\n        {prevPost && (\n          <Link className=\"post-card next\" key={prevPost.id} to={prevPost.slug}>\n            <div className=\"direction\">다음 글</div>\n            <div className=\"title\">{prevPost.title}</div>\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default PostNavigator;\n","import React from 'react';\nimport './style.scss';\n\nfunction PostContent({ html }) {\n  return (\n    <div className=\"post-content\">\n      <div className=\"markdown\" dangerouslySetInnerHTML={{ __html: html }} />\n    </div>\n  );\n}\n\nexport default PostContent;\n","import React, { createRef, useEffect, useRef } from 'react';\n\nconst src = 'https://utteranc.es/client.js';\nconst branch = 'master';\n\nfunction Utterances({ repo, path }) {\n  const rootElm = createRef();\n  const isUtterancesLoaded = useRef(false);\n\n  useEffect(() => {\n    if (!rootElm.current || isUtterancesLoaded.current) return;\n    const storedIsDarkMode = localStorage.getItem('isDarkMode');\n\n    const utterances = document.createElement('script');\n    const utterancesConfig = {\n      src,\n      repo,\n      branch,\n      theme: JSON.parse(storedIsDarkMode) ? 'photon-dark' : 'github-light',\n      label: 'comment',\n      async: true,\n      'issue-term': 'pathname',\n      crossorigin: 'anonymous',\n    };\n\n    Object.keys(utterancesConfig).forEach((configKey) => {\n      utterances.setAttribute(configKey, utterancesConfig[configKey]);\n    });\n    rootElm.current.appendChild(utterances);\n    isUtterancesLoaded.current = true;\n  }, [repo, rootElm, path]);\n\n  return <div className=\"utterances\" ref={rootElm} />;\n}\n\nexport default Utterances;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../layout';\nimport Seo from '../components/seo';\nimport PostHeader from '../components/post-header';\nimport PostNavigator from '../components/post-navigator';\nimport Post from '../models/post';\nimport PostContent from '../components/post-content';\nimport Utterances from '../components/utterances';\n\nfunction BlogTemplate({ data }) {\n  const curPost = new Post(data.cur);\n  const prevPost = data.prev && new Post(data.prev);\n  const nextPost = data.next && new Post(data.next);\n  const { comments } = data.site?.siteMetadata;\n  const utterancesRepo = comments?.utterances?.repo;\n\n  return (\n    <Layout>\n      <Seo title={curPost?.title} description={curPost?.excerpt} />\n      <PostHeader post={curPost} />\n      <PostContent html={curPost.html} />\n      <PostNavigator prevPost={prevPost} nextPost={nextPost} />\n      {utterancesRepo && <Utterances repo={utterancesRepo} path={curPost.slug} />}\n    </Layout>\n  );\n}\n\nexport default BlogTemplate;\n\nexport const pageQuery = graphql`\n  query($slug: String, $nextSlug: String, $prevSlug: String) {\n    cur: markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      excerpt(pruneLength: 500, truncate: true)\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    next: markdownRemark(fields: { slug: { eq: $nextSlug } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    prev: markdownRemark(fields: { slug: { eq: $prevSlug } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    site {\n      siteMetadata {\n        siteUrl\n        comments {\n          utterances {\n            repo\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["post","React","className","emoji","categories","map","category","Link","key","to","title","prevPost","nextPost","id","slug","html","dangerouslySetInnerHTML","__html","repo","path","rootElm","createRef","isUtterancesLoaded","useRef","useEffect","current","storedIsDarkMode","localStorage","getItem","utterances","document","createElement","utterancesConfig","src","branch","theme","JSON","parse","label","async","crossorigin","Object","keys","forEach","configKey","setAttribute","appendChild","ref","data","curPost","Post","cur","prev","next","comments","site","_data$site","siteMetadata","utterancesRepo","_comments$utterances","Layout","Seo","description","excerpt","PostHeader","PostContent","PostNavigator","Utterances"],"sourceRoot":""}